#include<stdbool.h>
#include<assert.h>

/*bool vazia (struct Lista* li){
    assert (li =!NULL)
    if(li-> inicio == NULL){
        return true;
    }else {
        return false;
    }

}*/

/*Função que adiciona um valor na lista:
 void inserir (struct Lista* li, int pos, int item ){
assert (li!= NULL);
assert(pos>=0 && pos <= li-> tamanho);
struct No* novo_no = (struct No*) malloc(sizeof(struct No));
novo_no -> info = item;
if (pos == 0){
    novo_no -> proximo =li->inicio;
    li->inicio = novo_no;

} else{
    struct No* aux = li->inicio;
    for(int i = 0; i< pos-1; i++){
        aux = aux -> proximo;
    }
    novo_no-> proximo = aux-> proximo;
    aux->proximo = novo_no;
}
li->tamanho++;
    
        
    }*/

    /*Função que imprime 

void imprimir( struct Lista* li){
    assert(li=!NULL);
    printf("\nLista: ");
    struct No* aux = li->inicio;
    for(int i =0; i<li->tamanho; i++){
        printf("%d",aux->info);
        aux = aux->proximo;
    }
}*/



int remover(struct Lista* li, int pos){
    assert(vazia(li)==false);
    assert(pos>= 0 && pos <li->tamanho);

    struct No* ant =NULL;
    struct No* aux = li->inicio;
    for(int i=0; i<pos;i++){
        ant=aux;
        aux=aux->proximo;
    }
    if (ant==NULL){
        li->inicio=aux->proximo;
    } else{
        ant->proximo =aux->proximo;
    }   
    int elemento =aux->info;
    li->tamanho--;
    free(aux);
    return elemento;
}
